ui_19 <- fluidPage(
titlePanel('BMI Calculator'),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter your name'),
numericInput('height', 'Enter your height (in m)', 1.5, 1, 2, step = 0.1),
numericInput('weight', 'Enter your weight (in Kg)', 60, 45, 120)
),
mainPanel(
textOutput("bmi")
)
)
)
server_19 <- function(input, output, session) {
rval_bmi <- eactive({
input$weight/(input$height^2)
})
output$bmi <- renderText({
bmi <- rval_bmi()
# MODIFY CODE BELOW:
# Use isolate to stop output from updating when name changes.
paste("Hi", isolate({input$name}), ". Your BMI is", round(bmi, 1))
})
}
shinyApp(ui = ui_19, server = server_19)
## ````6.3 Isolates ----
ui_19 <- fluidPage(
titlePanel('BMI Calculator'),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter your name'),
numericInput('height', 'Enter your height (in m)', 1.5, 1, 2, step = 0.1),
numericInput('weight', 'Enter your weight (in Kg)', 60, 45, 120)
),
mainPanel(
textOutput("bmi")
)
)
)
server_19 <- function(input, output, session) {
rval_bmi <- reactive({
input$weight/(input$height^2)
})
output$bmi <- renderText({
bmi <- rval_bmi()
# MODIFY CODE BELOW:
# Use isolate to stop output from updating when name changes.
paste("Hi", isolate({input$name}), ". Your BMI is", round(bmi, 1))
})
}
shinyApp(ui = ui_19, server = server_19)
## ````6.3 Isolates ----
ui_19 <- fluidPage(
titlePanel('BMI Calculator'),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter your name'),
numericInput('height', 'Enter your height (in m)', 1.5, 1, 2, step = 0.1),
numericInput('weight', 'Enter your weight (in Kg)', 60, 45, 120)
),
mainPanel(
textOutput("bmi")
)
)
)
server_19 <- function(input, output, session) {
rval_bmi <- reactive({
input$weight/(input$height^2)
})
output$bmi <- renderText({
bmi <- rval_bmi()
# MODIFY CODE BELOW:
# Use isolate to stop output from updating when name changes.
paste("Hi", isolate({input$name}), ". Your BMI is", round(bmi, 1))
})
}
shinyApp(ui = ui_19, server = server_19)
?eventReactive
ui_20 <- fluidPage(
titlePanel('BMI Calculator'),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter your name'),
numericInput('height', 'Enter height (in m)', 1.5, 1, 2, step = 0.1),
numericInput('weight', 'Enter weight (in Kg)', 60, 45, 120),
actionButton("show_bmi", "Show BMI")
),
mainPanel(
textOutput("bmi")
)
)
)
server_20 <- function(input, output, session) {
# MODIFY CODE BELOW: Use eventReactive to delay the execution of the
# calculation until the user clicks on the show_bmi button (Show BMI)
rval_bmi <- eventReactive(input$show_bmi, {
input$weight/(input$height^2)
})
output$bmi <- renderText({
bmi <- rval_bmi()
paste("Hi", input$name, ". Your BMI is", round(bmi, 1))
})
}
shinyApp(ui = ui_20, server = server_20)
?actionButton
?observeEvent
ui_21 <- fluidPage(
titlePanel('BMI Calculator'),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter your name'),
numericInput('height', 'Enter your height in meters', 1.5, 1, 2),
numericInput('weight', 'Enter your weight in Kilograms', 60, 45, 120),
actionButton("show_bmi", "Show BMI"),
# CODE BELOW: Add an action button named "show_help"
actionButton("show_help", "Help")
),
mainPanel(
textOutput("bmi")
)
)
)
server_21 <- function(input, output, session) {
# MODIFY CODE BELOW: Wrap in observeEvent() so the help text
# is displayed when a user clicks on the Help button.
# Display a modal dialog with bmi_help_text
# MODIFY CODE BELOW: Uncomment code
observeEvent(input$show_help, {
showModal(modalDialog(bmi_help_text))
})
rv_bmi <- eventReactive(input$show_bmi, {
input$weight/(input$height^2)
})
output$bmi <- renderText({
bmi <- rv_bmi()
paste("Hi", input$name, ". Your BMI is", round(bmi, 1))
})
}
shinyApp(ui = ui_21, server = server_21)
ui_21 <- fluidPage(
titlePanel('BMI Calculator'),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter your name'),
numericInput('height', 'Enter your height in meters', 1.5, 1, 2),
numericInput('weight', 'Enter your weight in Kilograms', 60, 45, 120),
actionButton("show_bmi", "Show BMI"),
# CODE BELOW: Add an action button named "show_help"
actionButton("show_help", "Help")
),
mainPanel(
textOutput("bmi")
)
)
)
server_21 <- function(input, output, session) {
# MODIFY CODE BELOW: Wrap in observeEvent() so the help text
# is displayed when a user clicks on the Help button.
# Display a modal dialog with bmi_help_text
bmi_help_text <- "Body Mass Index is a simple calculation using a person's height and weight. The formula is BMI = kg/m2 where kg is a person's weight in kilograms and m2 is their height in metres squared. A BMI of 25.0 or more is overweight, while the healthy range is 18.5 to 24.9."
observeEvent(input$show_help, {
showModal(modalDialog(bmi_help_text))
})
rv_bmi <- eventReactive(input$show_bmi, {
input$weight/(input$height^2)
})
output$bmi <- renderText({
bmi <- rv_bmi()
paste("Hi", input$name, ". Your BMI is", round(bmi, 1))
})
}
shinyApp(ui = ui_21, server = server_21)
140/120
install.packages("ISLR")
library(ISLR)
data("Auto")
View(data)
?data
?data
require(utils)
data()
ds <- c("USArrests", "VADeaths")
df[1]
ds[1]
data(USArrests, "VADeaths")
View(y_pred_b)
data("Auto")
data("Auto")
auto <- data("Auto")
View(data)
data(Auto)
library(ISLR)
require(utils)
data()
data("Auto")
Auto
data("Boston")
data(Boston)
data("Caravan")
Caravan
data("Carseats")
Carseats
data("College")
College
data("Credit")
Credit
data("Default")
Default
data("Hitters")
Hitters
data("Khan")
Khan
data("NCI60")
NCI60
data("OJ")
OJ
data("Portfolio")
Portfolio
data("Smarket")
Smarket
data("Wage")
Wage
data("Weekly")
Weekly
library(MASS)
data("Boston")
Boston
data("USArrests")
USArrests
Sys.getenv()
Sys.getenv("SIR")
class(College)
class(Khan)
?read.csv
?write.csv
Khan$xtrain
names(Khan)
setwd("/Users/iakubovskii/Machine_Learning/RANEPA/MachineLearning/Data")
data_list <- c("Boston", "Auto", "USArrests", "Caravan", "Carseats", "College",
"Credit", "Default", "Hitters", "Khan", "NCI60", "OJ", "Portfolio", "Smarket",
"Wage", "Weekly")
for (dat in data_list)
{
data(dat)
if (class(dat) != "list")
{
write.csv(get(data), file = dat)
}
else
{
for (name in names(Khan))
{
write.csv(get(data)[[name]], file = paste0(dat, "_", name))
}
}
}
for (dat in data_list)
{
data(dat)
if (class(dat) != "list")
{
write.csv(get(dat), file = dat)
}
else
{
for (name in names(Khan))
{
write.csv(get(dat)[[name]], file = paste0(dat, "_", name))
}
}
}
dat
data(dat)
data("Khan")
# 0. Datasets ----
library(ISLR)
library(MASS)
setwd("/Users/iakubovskii/Machine_Learning/RANEPA/MachineLearning/Data")
data_list <- c("Boston", "Auto", "USArrests", "Caravan", "Carseats", "College",
"Credit", "Default", "Hitters", "Khan", "NCI60", "OJ", "Portfolio", "Smarket",
"Wage", "Weekly")
for (dat in data_list){print(dat)}
for (dat in data_list)
{
data(dat)
if (class(dat) != "list")
{
write.csv(get(dat), file = dat)
}
else
{
for (name in names(Khan))
{
write.csv(get(dat)[[name]], file = paste0(dat, "_", name))
}
}
}
for (dat in data_list)
{
print(dat)
data(dat)
if (class(dat) != "list")
{
write.csv(get(dat), file = dat)
}
else
{
for (name in names(Khan))
{
write.csv(get(dat)[[name]], file = paste0(dat, "_", name))
}
}
}
library(purrr)
walk(data_list, data)
warnings()
data_list <- list("Boston", "Auto", "USArrests", "Caravan", "Carseats", "College",
"Credit", "Default", "Hitters", "Khan", "NCI60", "OJ", "Portfolio", "Smarket",
"Wage", "Weekly")
walk(data_list, data)
data_list <- list("Boston", "Auto", "USArrests", "Caravan", "Carseats", "College",
"Credit", "Default", "Hitters", "Khan", "NCI60", "OJ", "Portfolio", "Smarket",
"Wage", "Weekly")
walk(data_list, data)
warnings()
?walk
data_list
walk(data_list, data())
walk(data_list, data())
?data
walk(data_list, utils::data)
for (dat in data_list)
{
print(dat)
data(dat)
}
warnings()
for (dat in data_list)
{
print(dat)
data(get(dat))
}
warnings()
data(data_list[[1]])
data_list[[1]]
data_list[[1]]
data("Boston")
get("Boston")
data(Hitters)
data(eval(dat))
dat
eval(dat)
eval(dat)
do.call("<-",list(data_list, data_list))
parse(text = dat)
eval(parse(text = dat))
eval(parse(text = "Portfolio"))
# 0. Datasets ----
library(ISLR)
library(MASS)
library(purrr)
setwd("/Users/iakubovskii/Machine_Learning/RANEPA/MachineLearning/Data")
data_list <- с("Boston", "Auto", "USArrests", "Caravan", "Carseats", "College",
"Credit", "Default", "Hitters", "Khan", "NCI60", "OJ", "Portfolio", "Smarket",
"Wage", "Weekly")
for (dataset in data_list)
{
dat <- eval(parse(text = dataset))
if (class(dat) != "list")
{
write.csv(dat, file = paste0(dataset, ".csv"))
}
else
{
for (name in names(Khan))
{
write.csv(dat[[name]], file = paste0(dat, "_", name, ".csv"))
}
}
}
# 0. Datasets ----
library(ISLR)
library(MASS)
library(purrr)
setwd("/Users/iakubovskii/Machine_Learning/RANEPA/MachineLearning/Data")
data_list <- с("Boston", "Auto", "USArrests", "Caravan", "Carseats", "College",
"Credit", "Default", "Hitters", "Khan", "NCI60", "OJ", "Portfolio", "Smarket",
"Wage", "Weekly")
for (dataset in data_list)
{
dat <- eval(parse(text = dataset))
if (class(dat) != "list")
{
write.csv(dat, file = paste0(dataset, ".csv"))
}
else
{
for (name in names(dat))
{
write.csv(dat[[name]], file = paste0(dat, "_", name, ".csv"))
}
}
}
dat
name
dat[[name]]
xtr <- dat[[name]]
View(xtr)
dat[[name]] %>% as.data.frame()
xtr <- dat[[name]] %>% as.data.frame()
View(xtr)
# 0. Datasets ----
library(ISLR)
library(MASS)
library(purrr)
setwd("/Users/iakubovskii/Machine_Learning/RANEPA/MachineLearning/Data")
data_list <- с("Boston", "Auto", "USArrests", "Caravan", "Carseats", "College",
"Credit", "Default", "Hitters", "Khan", "NCI60", "OJ", "Portfolio", "Smarket",
"Wage", "Weekly")
for (dataset in data_list)
{
dat <- eval(parse(text = dataset))
if (class(dat) != "list")
{
write.csv(dat, file = paste0(dataset, ".csv"))
}
else
{
for (name in names(dat))
{
dat_export <- dat[[name]] %>% as.data.frame()
write.csv(dat_export, file = paste0(dat, "_", name, ".csv"))
}
}
}
# 0. Datasets ----
library(ISLR)
library(MASS)
library(purrr)
setwd("/Users/iakubovskii/Machine_Learning/RANEPA/MachineLearning/Data")
data_list <- с("Boston", "Auto", "USArrests", "Caravan", "Carseats", "College",
"Credit", "Default", "Hitters", "Khan", "NCI60", "OJ", "Portfolio", "Smarket",
"Wage", "Weekly")
for (dataset in data_list)
{
dat <- eval(parse(text = dataset))
if (class(dat) != "list")
{
write.csv(dat, file = paste0(dataset, ".csv"))
}
else
{
for (name in names(dat))
{
dat_export <- dat[[name]] %>% as.data.frame()
write.csv(dat_export, file = paste0(dataset, "_", name, ".csv"))
}
}
}
dat <- eval(parse(text = "Auto"))
View(dat)
class(dat)
# 0. Datasets ----
library(ISLR)
library(MASS)
library(purrr)
setwd("/Users/iakubovskii/Machine_Learning/RANEPA/MachineLearning/Data")
data_list <- с("Boston", "Auto", "USArrests", "Caravan", "Carseats", "College",
"Credit", "Default", "Hitters", "Khan", "NCI60", "OJ", "Portfolio", "Smarket",
"Wage", "Weekly")
for (dataset in data_list)
{
dat <- eval(parse(text = dataset))
if (class(dat) != "list")
{
print(dataset)
write.csv(dat, file = paste0(dataset, ".csv"))
}
else
{
for (name in names(dat))
{
dat_export <- dat[[name]] %>% as.data.frame()
write.csv(dat_export, file = paste0(dataset, "_", name, ".csv"))
}
}
}
# 0. Datasets ----
library(ISLR)
library(MASS)
library(purrr)
setwd("/Users/iakubovskii/Machine_Learning/RANEPA/MachineLearning/Data")
data_list <- с("Boston", "Auto", "USArrests", "Caravan", "Carseats", "College",
"Credit", "Default", "Hitters", "Khan", "NCI60", "OJ", "Portfolio", "Smarket",
"Wage", "Weekly")
for (dataset in data_list)
{
dat <- eval(parse(text = dataset))
if (class(dat) != "list")
{
print(dataset)
write.csv(dat, file = paste0(dataset, ".csv"))
}
else
{
for (name in names(dat))
{
dat_export <- dat[[name]] %>% as.data.frame()
write.csv(dat_export, file = paste0(dataset, "_", name, ".csv"))
}
}
}
